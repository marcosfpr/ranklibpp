<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="_c_make_lists_8txt" kind="file" language="C++">
    <compoundname>CMakeLists.txt</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="_c_make_lists_8txt_1ac9af5fc709c56e84ae6600e6ad5eea68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>find_package</definition>
        <argsstring>(Boost) if(NOT Boost_FOUND) CPMFindPackage(NAME Boost GITHUB_REPOSITORY Orphis/boost-cmake VERSION 1.67.0 FIND_PACKAGE_ARGUMENTS &quot;COMPONENTS boost&quot;) endif() CPMFindPackage(NAME spdlog GITHUB_REPOSITORY gabime/spdlog VERSION 1.8.2 FIND_PACKAGE_ARGUMENTS &quot;&quot;) set(SOURCES impl/learning/DataPoint.cpp impl/learning/RankList.cpp impl/learning/DataSet.cpp impl/learning/Ranker.cpp impl/learning/Learner.cpp impl/learning/ensemble/AdaRank.cpp impl/metric/MetricScorer.cpp impl/metric/MAPScorer.cpp impl/metric/PrecisionScorer.cpp impl/utils/KeyValue.cpp impl/utils/Logging.cpp) add_library(ltr $</argsstring>
        <name>find_package</name>
        <param>
          <type>Boost</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/marcos/Projetos/ltrpp/ltr/lib/CMakeLists.txt" line="5" column="1" bodyfile="/home/marcos/Projetos/ltrpp/ltr/lib/CMakeLists.txt" bodystart="5" bodyend="44"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#######################################################</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">###<sp/>Source<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>###</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#######################################################</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal">find_package(Boost)</highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(NOT<sp/>Boost_FOUND)</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/>CPMFindPackage(</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NAME<sp/>Boost</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GITHUB_REPOSITORY<sp/>Orphis/boost-cmake</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VERSION<sp/>1.67.0</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>setting<sp/>FIND_PACKAGE_ARGUMENTS<sp/>allow<sp/>usage<sp/>with<sp/>`CPM_USE_LOCAL_PACKAGES`</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FIND_PACKAGE_ARGUMENTS<sp/></highlight><highlight class="stringliteral">&quot;COMPONENTS<sp/>boost&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="14"><highlight class="normal">endif()</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal">CPMFindPackage(</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>NAME<sp/>spdlog</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>GITHUB_REPOSITORY<sp/>gabime/spdlog</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>VERSION<sp/>1.8.2</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>FIND_PACKAGE_ARGUMENTS<sp/>&quot;&quot;</highlight></codeline>
<codeline lineno="21"><highlight class="normal">)</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal">set(</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>SOURCES</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>impl/learning/DataPoint.cpp</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>impl/learning/RankList.cpp</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>impl/learning/DataSet.cpp</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>impl/learning/Ranker.cpp</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>impl/learning/Learner.cpp</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>impl/learning/ensemble/AdaRank.cpp</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>impl/metric/MetricScorer.cpp</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>impl/metric/MAPScorer.cpp</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>impl/metric/PrecisionScorer.cpp</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>impl/utils/KeyValue.cpp</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>impl/utils/Logging.cpp</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal">)</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal">add_library(</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>ltr<sp/></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>${SOURCES}</highlight></codeline>
<codeline lineno="45"><highlight class="normal">)</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal">target_include_directories(</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>ltr</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>PUBLIC<sp/>api</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>PRIVATE</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>${Boost_INCLUDE_DIRS}</highlight></codeline>
<codeline lineno="52"><highlight class="normal">)</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal">#<sp/>logging<sp/>stuff</highlight></codeline>
<codeline lineno="55"><highlight class="normal">target_link_libraries(ltr<sp/>PRIVATE<sp/>spdlog<sp/>stdc++fs<sp/>pthread)</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal">target_compile_features(ltr<sp/>PUBLIC<sp/>cxx_std_17)</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal">include(CheckSymbolExists)</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>Some<sp/>hack<sp/>to<sp/>not<sp/>depend<sp/>on<sp/>FILE*<sp/>internals</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>https://github.com/alandefreitas/matplotplusplus/issues/4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal">check_symbol_exists(__fbufsize<sp/></highlight><highlight class="stringliteral">&quot;stdio_ext.h&quot;</highlight><highlight class="normal"><sp/>HAVE_FBUFSIZE)</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(HAVE_FBUFSIZE)</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>target_compile_definitions(ltr<sp/>PRIVATE<sp/>LTR_HAS_FBUFSIZE)</highlight></codeline>
<codeline lineno="66"><highlight class="normal">endif()</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>Another<sp/>hack<sp/>to<sp/>check<sp/>for<sp/>min<sp/>in<sp/>Windows.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>http://www.suodenjoki.dk/us/archive/2010/min-max.htm</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal">check_symbol_exists(min<sp/></highlight><highlight class="stringliteral">&quot;Windows.h&quot;</highlight><highlight class="normal"><sp/>HAVE_WINDOWS_MINMAX)</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(HAVE_WINDOWS_MINMAX)</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>target_compile_definitions(ltr<sp/>PUBLIC<sp/>NOMINMAX)</highlight></codeline>
<codeline lineno="73"><highlight class="normal">endif()</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal">if<sp/>(BUILD_WITH_PEDANTIC_WARNINGS)</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(MSVC)</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target_compile_options(ltr<sp/>PRIVATE<sp/>/W4<sp/>/WX)</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>else<sp/>()</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target_compile_options(ltr<sp/>PRIVATE<sp/>-Wall<sp/>-Wextra<sp/>-pedantic<sp/>-Werror)</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#<sp/>Allow<sp/>the<sp/>warnings<sp/>related<sp/>to<sp/>the<sp/>bundled<sp/>CImg</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(CMAKE_CXX_COMPILER_ID<sp/>STREQUAL<sp/></highlight><highlight class="stringliteral">&quot;Clang&quot;</highlight><highlight class="normal"><sp/>OR<sp/>CMAKE_CXX_COMPILER_ID<sp/>STREQUAL<sp/></highlight><highlight class="stringliteral">&quot;AppleClang&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target_compile_options(ltr<sp/>PRIVATE<sp/>-Wno-</highlight><highlight class="keyword">null</highlight><highlight class="normal">-pointer-arithmetic<sp/>-Wno-</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">-subscripts)</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elseif<sp/>(CMAKE_CXX_COMPILER_ID<sp/>STREQUAL<sp/></highlight><highlight class="stringliteral">&quot;GNU&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target_compile_options(ltr<sp/>PRIVATE<sp/>-Wno-error=</highlight><highlight class="keyword">class</highlight><highlight class="normal">-memaccess<sp/>-Wno-</highlight><highlight class="keyword">class</highlight><highlight class="normal">-memaccess)</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>()</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>message(ERROR<sp/></highlight><highlight class="stringliteral">&quot;Cannot<sp/>disable<sp/>the<sp/>relevant<sp/>warnings<sp/>for<sp/>${CMAKE_CXX_COMPILER_ID}&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>endif<sp/>()</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>endif<sp/>()</highlight></codeline>
<codeline lineno="89"><highlight class="normal">endif<sp/>()</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>Setting<sp/>public<sp/>header</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal">set_target_properties(ltr<sp/>PROPERTIES<sp/>PUBLIC_HEADER<sp/>/api/ltr.hpp)</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>Install</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(BUILD_INSTALLER)</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#<sp/>Install<sp/>targets</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>install(TARGETS<sp/>ltr</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPORT<sp/>ltrTargets</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LIBRARY<sp/>DESTINATION<sp/>${CMAKE_INSTALL_LIBDIR}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ARCHIVE<sp/>DESTINATION<sp/>${CMAKE_INSTALL_LIBDIR}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PUBLIC_HEADER<sp/>DESTINATION<sp/>${CMAKE_INSTALL_LIBDIR}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>#<sp/>Install<sp/>headers</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>install(DIRECTORY<sp/>${CMAKE_CURRENT_SOURCE_DIR}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DESTINATION<sp/>${CMAKE_INSTALL_INCLUDEDIR}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FILES_MATCHING<sp/>PATTERN<sp/></highlight><highlight class="stringliteral">&quot;*.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="109"><highlight class="normal">endif()</highlight></codeline>
    </programlisting>
    <location file="/home/marcos/Projetos/ltrpp/ltr/lib/CMakeLists.txt"/>
  </compounddef>
</doxygen>
